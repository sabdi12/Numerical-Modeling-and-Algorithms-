{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "COMPUTING TEMPERATURE VARIATIONS IN THE GROUND\n",
    "\n",
    "Introduction to PDE\n",
    "\n",
    "A partial differential equation (a PDE) is a mathematical equation that involves two or more independent variables, an unknown function (dependent on those variables), and partial derivatives of the unknown function with respect to the independent variables. The essential difference between Ordinary differential equations ( ODEs) and PDEs is,  ODEs involve derivatives in only one variable, whereas PDEs involve derivatives in multiple variables as a result  PDEs have more than one variables and more difficult to deal with. \n",
    "        e.g. $\\frac{\\partial u}{\\partial t} = \\frac{\\partial^2 u}{\\partial x^2}$ where as ODE will be just $\\frac{d f}{d x} = f^2$\n",
    "          \n",
    "Note: The order of a partial differential equation is the order of the highest derivative involved. \n",
    "\n",
    "We  focus on one of the most widely encountered partial differential equations: the diffusion equation, which in one dimension looks like\n",
    "$\\frac{\\partial u }{\\partial t} = \\beta \\frac{\\partial^2 u}{\\partial x^2} + g$\n",
    "\n",
    "\n",
    "The unknown in the diffusion equation is a function $(u(x,t))$ of space and time. The physical significance of $(u)$ depends on what type of process that is described by the diffusion equation. For example, $(u)$ is the concentration of a substance if the diffusion equation models transport of this substance by diffusion.\n",
    "\n",
    "The term $(g)$ is known as the source term and represents generation, or loss, of heat (by some mechanism) within the body.\n",
    "\n",
    "A partial differential equation is solved in some domain $(Ω)$ in space and for a time interval $([0,T])$.The initial and boundary conditions are extremely important Without them, the solution is not unique, and no numerical method will work. The type and number of such conditions depend on the type of equation. For the diffusion equation, we need one initial condition, $(u(x,0))$, stating what $(u)$ is when the process starts. In addition, the diffusion equation needs one boundary condition at each point of the boundary $(\\partial Ω)$ of $ (Ω)$ This condition can either be that \n",
    "$(u)$ is known or that we know the normal derivative, $\\Delta u.n = (\\frac{\\partial u}{\\partial n})(n)$ denotes an outward unit normal to $\\partialΩ$.\n",
    "\n",
    "We consider the evolution of temperature in a one-dimensional medium, more precisely a long rod, where the surface of the rod is covered by an insulating material. The heat can then not escape from the surface, which means that the temperature distribution will only depend on a coordinate along the rod, $(x)$, and time $(t)$. At one end of the rod, $(x=L)$, we also assume that the surface is insulated, but at the other end, $(x=0)$, we assume that we have some device for controlling the temperature of the medium. Here, a function $(s(t))$ tells what the temperature is in time. We therefore have a boundary condition $(u(0,t)=s(t))$. At the other insulated end, $(x=L)$, heat cannot escape, which is expressed by the boundary condition $\\frac{(\\partial u(L,t)}{\\partial x}=0)$. The surface along the rod is also insulated and hence subject to the same boundary condition (here generalized to $(∂u/∂n=0)$ at the curved surface). However, since we have reduced the problem to one dimension, we do not need this physical boundary condition in our mathematical model. In one dimension, we can set $(Ω=[0,L])$.\n",
    "\n",
    "\n",
    "To summarize, the partial differential equation with initial and boundary conditions reads\n",
    " $\\Rightarrow \\frac{\\partial u(x,t)}{\\partial t} = \\beta \\frac{\\partial^2 u(x,t)}{\\partial x^2} + g(x,t), x\\in (0,L), t \\in (0,T],  (1.1) \\\\\n",
    " \\Rightarrow u(0,t)=s(t),t\\in (0,T],   (1.2)\\\\\n",
    " \\Rightarrow\\frac{\\partial u(L,t)}{\\partial x}(L,t)=0,t \\in (0,T],   (1.3)\\\\\n",
    " \\Rightarrow[u(x,0)=I(x),x \\in [0,L],  (1.4)]$\n",
    "\n",
    "\\Mathematically, we assume that at \\(t=0\\), the initial condition $1.4$  holds and that the partial differential equation $1.1$ comes into play for $t>0$. Similarly, at the end points, the boundary conditions $1.4$  and $1.4$ govern $u$ and the equation therefore is valid for $(x \\in (0,L))$.\n",
    "\n",
    "simplay example to prove this heat equation is let $u_t = u_{xx}$ and $u  = (\\frac{1}{2}x^2 + t) $ is a solution. check: \n",
    "$ u_t = \\frac{\\partial u}{\\partial t} = 1 \\\\ \n",
    "u_x = \\frac{\\partial u}{\\partial x} = x \\\\\n",
    "u_t = \\frac{\\partial u}{\\partial t} = 1 \\\\ \n",
    "u_{xx} = \\frac{\\partial^2 u}{\\partial x^2} = 1\\\\\n",
    "$ Therefore,$u_t =1= u_{xx}$  \n",
    "\n",
    "Partial differential equations are used to mathematically formulate, and thus aid the solution of, physical and other problems involving functions of several variables, such as the propagation of heat or sound, fluid flow, elasticity, electrostatics, electrodynamics, etc.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PROBLEM FORMULATION\n",
    "\n",
    "This problem is concerned with computing temperature variations in the ground. Surface temperature will vary with seasons and time of day so it is natural to get these oscillations in the temperature. The surface temperature at the ground will not be constant all the time. So, when there is a change in temperature, that change will be propagated into the ground. What we are interested in is how the temperature varies at different depths in the ground as a result of these oscillations of the surface temperature. It is important to note that we are assuming there is no horizontal variation of temperature, at least on a small scale. We are only concerned about the vertical temperature changes. Assuming at some depth, x = L, the heat variations are negligible, we can say ∂u/∂x =0  is the boundary condition for solving the PDE at x = L. We can assume a sinusoidal temperature equation of,\n",
    "\n",
    "When t = 0, we find that u(x,0) = A +Be^{-rx}sin(-rx)\n",
    "\n",
    "Where P represents 24 hours (24 * 60 * 60s). \n",
    "The ultimate goal in this problem is to plot both the numerical and analytical solutions as an animation for some number of days. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OUR APPROACH:\n",
    "\n",
    "To solve this problem numerically, for N number of mesh points, N-1 number of initial conditions were needed. To get this, the function I(x,t) in our code calculates these initial conditions. The function s(t) calculates the boundary condition for x = 0. Once these values are calculated, the function rhs(u,t,dx)) approximates partial time derivative by using a second order finite difference. The first time derivative is calculated at (x,t) = (0,0). This derivative is then used to calculate u(0+dx, 0+dt) by using Euler's forward method in time. The iterative formula is given by f(x,t+1) = f(x,t) + f'(x,t)*dt. This formula is iteratively applied for the mesh points and time as outlied in our problem formulation.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Part a) Show that the present problem has an analytical solution of the form $u(x,t)= A+Be^{−rx}sin(ωt−rx)$, for appropriate values of A, B, r, and ω.\n",
    "\n",
    "Any function that is supposed to be a solution, must fit the equation, boundary conditions and initial conditions, so we go ahead and check this. From before we have the temperature at the surface as a given sine function, i.e using x = 0 in the suggested (or given) solution should make it equal to the temperature function previously given for the surface. This implies immediately that $A = To, B = Ta $ and $ω = 2pi/P$. At the other boundary, we see that the suggested solution approaches zeros when x goes to infinity, which is consistent with the boundary condition $\\frac{\\partial u}{\\partial x} = 0$. When t = 0, we find that $u(x,0) = A +Be^{-rx}sin(-rx)$,\n",
    "\n",
    "                           \n",
    "So, by making this our initial temperature distribution, also the initial conditions will be consistent with the suggested solution.\n",
    "\n",
    "Finally, the suggested solution must be consistent with $\\frac{\\partial u}{\\partial t} =\\beta \\frac{\\partial^2 u}{\\partial x^2} $, so we perform the required partial derivatives to check, \n",
    "\n",
    "$$ \\frac{\\partial u}{\\partial t} = \\omega B e^{-rx}\\cos\\left(\\omega t -rx\\right),$$ $$ \\frac{\\partial u}{\\partial x} = -r B e^{-rx}\\sin\\left(\\omega t -rx\\right) -r B e^{-rx}\\cos\\left(\\omega t -rx\\right) ,$$ $$ \\frac{\\partial^2 u}{\\partial x^2} = -r\\left[-r B e^{-rx}\\sin\\left(\\omega t - rx\\right) - r B e^{-rx}\\cos\\left(\\omega t - rx\\right)\\right] - r\\left[-r B e^{-rx}\\cos\\left(\\omega t - rx\\right) + r B e^{-rx}\\sin\\left(\\omega t -rx\\right)\\right] ,$$ which reduces to $$ \\frac{\\partial^2 u}{\\partial x^2} = 2 r^2 B e^{-rx}\\cos\\left(\\omega t - rx\\right) ,$$\n",
    "\n",
    "\n",
    "\n",
    "This means that we can decide the final parameter r as well, since if only $( r = \\sqrt{\\frac{\\omega}{2\\beta}} )$, we have that $( \\frac{\\partial u}{\\partial t} = \\beta\\frac{\\partial^2 u}{\\partial x^2} )$.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "RELEVANT CONSTANTS\n",
    "\n",
    "T0 = 30℃:\n",
    "T0 represents the initial temperature at the surface of the ground, at x = 0. This is shown in the equation by letting x = 0 and t = 0 which results in all the terms except T0 being cancelled out. \n",
    "\n",
    "\n",
    "Ta = 15℃ :\n",
    "Ta is another temperature value, similar to T0. Ta is multiplied with the exponential decay and sinusoidal parts of the equation. Instead of representing the initial surface temperature, Ta relates to how the temperature varies at different depths. \n",
    "\n",
    "\n",
    "r = sqrt(ω/2β):\n",
    "\n",
    "r represents the rate at which the heat is being propagated into the ground. This value is positive, but made negative by the equation. At x = 0 (no depth), the e^-rx term will resolve to 1 because the depth is 0. But, as we look at deeper and deeper levels (increasing x values), the e^-rx term will tend towards 0. This makes sense because less and less heat will be propagated into the ground at deeper levels. In other words, the amount of heat transferred into the ground at a depth of 1 meter will be far greater than the amount of heat at 10 meters.\n",
    "\n",
    "\n",
    "ω = 2π/P:\n",
    "ω by definition is 2π/P. The period (P) in this problem is 24 hours but when converted to seconds it is 24 * 60 * 60. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2586367eb8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f258630b978>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "\n",
    "\n",
    "# Boundary function\n",
    "# This function calculates boundary surface temperature at x = 0 for a given t\n",
    "# u(0,t) = s(t)\n",
    "def s(x,t):\n",
    "    return u_exact(0,t)\n",
    "\n",
    "# Initial temperatures at all vertical distance points at t = 0 (non constant initial condition)\n",
    "# u(x,0)=I(x)\n",
    "def I(x,t):\n",
    "    return u_exact(x,0)\n",
    "\n",
    "# Constant initial conditions\n",
    "def I_constant(x,t):\n",
    "    return 30\n",
    "    \n",
    "# derivative of the boundary function at x = 0 at any t\n",
    "def dsdt(t):\n",
    "    T_a = 15\n",
    "    p = (24*60*60)\n",
    "    func = (1/p)*T_a*2*np.pi*np.cos((2*np.pi*t)/p)\n",
    "    return func\n",
    "\n",
    "# actual temperatures values at given vertical distance points at t\n",
    "def u_exact(x,t):\n",
    "    beta = (1*10**-6)\n",
    "    A = 30\n",
    "    B = 15\n",
    "    w = (2*np.pi)/(24*60*60)\n",
    "    r = np.sqrt(w/(2*beta))\n",
    "    func = A + B*(np.exp(-1*r*x))*(np.sin(w*t-r*x))\n",
    "    return func\n",
    "# at some depth x = l, heat changes in x vanishes\n",
    "def dudx(x,t):\n",
    "    return 0\n",
    "\n",
    "# This function approximates du(x,t)/dt using a second order derivative by a finite difference\n",
    "def rhs(u,t,dx):\n",
    "    N= len(u)-1\n",
    "    rhs = np.zeros(N+1)\n",
    "    rhs[0] = dsdt(t)\n",
    "    beta = (1*10**-6)\n",
    "    for i in range(1,N):\n",
    "        rhs[i] = ((beta)/(dx**2))*(u[i+1]-2*u[i]+u[i-1])\n",
    "    rhs[N] = (beta/(dx**2))*(2*u[N-2]+2*dx*dudx(N-1,t) - 2*u[N-1])\n",
    "    return rhs\n",
    "\n",
    "# Using Forward Euler in time to solve ODE\n",
    "def ode_Fe(U_0,dt,T,dx):\n",
    "    # Number of time points\n",
    "    N_t = int(round(float(T))/dt)\n",
    "    # Initialize temperature values to be calculated as function of distance and time\n",
    "    u = np.zeros((N_t+1,len(U_0)))\n",
    "    # Create time values at which temperature is to be calculated\n",
    "    t = np.linspace(0,N_t*dt,len(u))\n",
    "    u[0] = U_0\n",
    "    for n in range(N_t):\n",
    "        # Get derivative of all mesh points with respect to time \n",
    "        f = rhs(u[n],t[n],dx)\n",
    "        # calculate temperature of all mesh points in forward time of dt\n",
    "        u[n+1] = u[n] + dt*f\n",
    "    return u,t\n",
    "\n",
    "def main():\n",
    "    # Number of measured points (mesh points) in the vertical distance\n",
    "    N = 100\n",
    "    # distance from the surface in meters\n",
    "    x = np.linspace(0,5,N+1)\n",
    "    \n",
    "    # get initial conditions and boundary condition\n",
    "    U_0 = np.zeros(N+1)\n",
    "    U_0[0] = s(0,0)\n",
    "    U_0[1:] = I(x[1:],0)\n",
    "    \n",
    "    # define constants\n",
    "    beta = (1*10**-6)\n",
    "    dx = x[1]-x[0]\n",
    "    \n",
    "    # stability limit is calculated as \n",
    "    dt = dx**2/(2*beta)\n",
    "\n",
    "    # period to be observed is 3 days in seconds\n",
    "    T = (86400*3)\n",
    "    \n",
    "    # Compare numerical and analytical solutions for t = dt*2\n",
    "    \n",
    "    U,t = ode_Fe(U_0,dt,T,dx)\n",
    "    \n",
    "    plt.figure(figsize=[10,10])\n",
    "    plt.plot(x,U[25],'b*', label = 'numerical approx')\n",
    "    plt.plot(x,u_exact(x,dt*25),'r', label='exact')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "    \n",
    "    lines = plt.plot(x, U[0,:] ,x, u_exact(x, 0))\n",
    "    plt.xlabel('x')\n",
    "    plt.ylabel('u(x,t)')\n",
    "    plt.axis([x[0], x[-1], 13, 45])\n",
    "    # animate temperature varation for two days\n",
    "    c = int(1/3*U.shape[0])\n",
    "    # convert the time in seconds to hours\n",
    "    ti = (1/(60*60))*t\n",
    "    counter = 0\n",
    "    # plot temperature variations at different times and save it as png\n",
    "    for i in range(0,c):\n",
    "        lines[0].set_ydata(U[i,:])\n",
    "        lines[1].set_ydata(u_exact(x, t[i]))\n",
    "        plt.legend(['in hours, t = % 0f '% ti[i]])\n",
    "        plt.draw()\n",
    "        plt.savefig('tmp_%04d.png' % counter)\n",
    "        counter = counter + 1\n",
    "    \n",
    "main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " As our animation shows, initially temperature at the surface starts around 30 celsius in the day. As the day goes on, heat is transfered from the ground to the surface through radiation and conduction. As we expect, the temperatures rises and reaches maximum high noon. As the sun goes down, temperature falls down on the surface. The temperature starts to fall down significantly at night. This is due to the fact that at night ground cools down, so hot air comes directly from above to the ground.\n",
    " The numerical and analytical solution agree with each other significanly in this 24 hour period shown in the animation.\n",
    " \n",
    " The function I_constant(x,t) creates a scenario where as opposed to knowing the initial conditions, we assume a constant temperature at all mesh points. As shown in the animation, although the analytical and numerical solutions don't agree initially, they become close as early as t = 8 hours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
